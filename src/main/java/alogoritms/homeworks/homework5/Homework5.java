package alogoritms.homeworks.homework5;

import static alogoritms.homeworks.homework5.Rec.recur;

public class Homework5 {
    //1. a) Разделение на более мелкие задачи,
    //   б) рекурсивно вызываем задачи до их решения,
    //   в) объединить подзадачи, для получения окончательного решения всей задачи.
                    //              Преимущества:
    //2. а) Делит задачу на подзадачи что позволяет решать задачи параллельно, обеспечивая многопроцессорность.
    //   б) Сложная задача решается легко.
    //   в) Эффективно используется кэш память.
    //   г) Снижает временную сложность задачи.
                    //              Недостатки:
    //   а) Включает в решение рекурсию которая иногда мдленная.
    //   б) Эвективность зависит от реализации логики.
    //   в) Если в рекурсии есть ошибка приведет к сбою системы.
    //3. Отсортированный массив находим индекс наименьшего и наибольшего значений, складываем сумму индексов и делим на 2,
    // получаем индекс середины, по этому индексу сравниваем значение с значением которое мы ищем.
    // Если Значение по среднему индексу больше тогда маскимальным значением становится среднее значение -1.
    // Если значение по среднему индексу меньше тогда минимальным значением становится среднее значение +1.
    // После чего начнаем искать по новой с новыми значениями максимальным или минимальным,
    // и так до тех пор пока не найдем значение которое искали.
    //4.O(log n)



    public static void main(String[] args) {
        int [] arr = {1, 3, 5, 7, 8, 9, 12, 15, 23, 25, 27};
        BinarySearch search = new BinarySearch();
        search.binarySearch(arr,25);

        int fact = recur(2,5);
        System.out.println(fact);

        int [] array1 = {100, 112, 256, 349, 770};
        int [] array2 = {72, 86, 113, 119, 265, 445, 892};
        int i1=0;
        int i2=0;
        int searchValue = 7;
        int result=0;
        while(((i1+i2)+1)!=searchValue) {
            if (array1[i1] < array2[i2]) {
                i1++;
                result = array1[i1];
            } else {
                i2++;
                result = array2[i2];
            }
        }
        System.out.println(result);
    }

}
